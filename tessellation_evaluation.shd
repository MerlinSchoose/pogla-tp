#version 450

layout (quads, equal_spacing, ccw) in;

uniform float anim_time;
uniform mat4 view_matrix;
uniform mat4 model_matrix;
uniform mat4 projection_matrix;

out vec3 color;
out vec3 FragPos;
out vec3 normal;

float height(float x, float y, float time) {
  float res = sin(2.f * 3.14f * x + time) / 10.0f;
  res += sin(2.f * 3.14f * gl_TessCoord.y + time + 0.2f) / 8.0f;
  return res;
}

vec3 discrete_normal(float time) {
  float base_height = height(gl_TessCoord.x, gl_TessCoord.y, time);

  float dx = 0.01f;
  float base_height_dx = height(gl_TessCoord.x + dx, gl_TessCoord.y, time);

  float dy = 0.01f;
  float base_height_dy = height(gl_TessCoord.x, gl_TessCoord.y + dy, time);

  vec3 differential_along_x = vec3(1.0f, (base_height_dx - base_height) / dx, 0.0f);
  vec3 differential_along_y = vec3(0.0f, (base_height_dy - base_height) / dy, 1.0f);

  return normalize(cross(differential_along_y, differential_along_x));
}

void main() {
  vec4 p1 = mix(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_TessCoord.x);
  vec4 p2 = mix(gl_in[3].gl_Position, gl_in[2].gl_Position, gl_TessCoord.x);
  vec4 p = mix(p1, p2, gl_TessCoord.y);

  float time_regulator = 1.2f;
  float time = anim_time / time_regulator;
  //time = 0.1f;

  //p.y = sin(2.f * 3.14f * gl_TessCoord.x + time) / 10.0f;
  //p.y += sin(2.f * 3.14f * gl_TessCoord.y + time + 0.2f) / 8.0f;
  p.y = height(gl_TessCoord.x, gl_TessCoord.y, time);
  //normal = vec3(-2.f * 3.14f * cos(2.f * 3.14f * gl_TessCoord.x + time) / 10.0f, 1.f, 0.f);
  normal = discrete_normal(time);

  color = vec3(gl_TessCoord.x, gl_TessCoord.y, (sin(time) + 1.0f) / 2.0f);
  //color = vec3((normal.x + 1.f) / 2.f, 0.f, 0.f);
  color = vec3(0.0f, 0.0f, 1.0f);

  gl_Position = projection_matrix * view_matrix * model_matrix * p; // model then view ?
  FragPos = vec3(model_matrix * p); // throw out last coordinates ?
}